import asyncio
import logging
import re
import json
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from config import API_TOKEN, ADMIN_ID
from tools.yougile_api import create_task
from fastapi import FastAPI, Request
import uvicorn

logging.basicConfig(level=logging.INFO)

os.makedirs("data", exist_ok=True)
USER_FILE = "data/users.json"
ORDER_LOG = "data/orders.log"

if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

if not os.path.exists(ORDER_LOG):
    with open(ORDER_LOG, "w", encoding="utf-8") as f:
        f.write("")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

class OrderForm(StatesGroup):
    name = State()
    phone = State()
    address = State()
    comment = State()

def main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üßæ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")]],
        resize_keyboard=True
    )

def cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def phone_is_valid(phone: str) -> bool:
    digits = re.sub(r"\D", "", phone)
    return 10 <= len(digits) <= 14

def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

user_joined = load_users()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_joined:
        user_joined[user_id] = {
            "joined": datetime.now().isoformat(),
            "username": message.from_user.username
        }
        save_users(user_joined)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–º—É –≤–∞—à –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üßæ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å.",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("users"))
async def list_users(message: types.Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.")
        return

    users = load_users()
    if not users:
        await message.answer("üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É.")
        return

    def get_joined(data):
        if isinstance(data, dict):
            return data.get("joined", "1970-01-01T00:00:00")
        return data  # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä–æ–∫–∞)

    sorted_users = sorted(users.items(), key=lambda x: get_joined(x[1]))
    text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n"

    for uid, data in sorted_users:
        if isinstance(data, dict):
            name = data.get("username", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            joined = data.get("joined", "‚Äî")
        else:
            name = "‚ùì –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç"
            joined = data
        text += f"‚Ä¢ <b>{name}</b>\n  ID: <code>{uid}</code>\n  –î–∞—Ç–∞: {joined}\n\n"

    await message.answer(text)

@dp.message(F.text == "üßæ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    await state.set_state(OrderForm.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=cancel_kb())

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", StateFilter("*"))
async def cancel_order(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

@dp.message(OrderForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(OrderForm.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=cancel_kb())

@dp.message(OrderForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone_is_valid(phone):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(phone=phone)
    await state.set_state(OrderForm.address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:", reply_markup=cancel_kb())

@dp.message(OrderForm.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    await state.set_state(OrderForm.comment)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", reply_markup=cancel_kb())

@dp.message(OrderForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    data = await state.get_data()

    summary = (
        "üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"üÜî –ö–ª–∏–µ–Ω—Ç: {message.from_user.full_name} (id: {message.from_user.id})"
    )

    await bot.send_message(ADMIN_ID, summary)

    with open(ORDER_LOG, "a", encoding="utf-8") as f:
        f.write(summary + "\n\n")

    try:
        task = create_task(
            title=f"–ó–∞–∫–∞–∑ –æ—Ç {data['name']}",
            description=summary
        )
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ YouGile.\n"
            f"ID: {task.get('id')}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.get('title')}",
            reply_markup=main_menu_kb()
        )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ YouGile.\n–û—à–∏–±–∫–∞: {e}",
            reply_markup=main_menu_kb()
        )

    await state.clear()

async def reminder_loop():
    while True:
        now = datetime.now()
        for user_id, user_data in list(user_joined.items()):
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä–æ–∫–∞)
            if isinstance(user_data, str):
                user_data = {"joined": user_data, "username": None}
                user_joined[user_id] = user_data
                save_users(user_joined)

            # –ù–µ–ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (–Ω–µ—Ç joined)
            if isinstance(user_data, dict) and "joined" not in user_data:
                user_data["joined"] = datetime.now().isoformat()
                save_users(user_joined)

            joined_at = datetime.fromisoformat(user_data["joined"])
            if now - joined_at >= timedelta(days=180):
                await bot.send_message(
                    int(user_id),
                    "üîß üîî –£–∂–µ 6 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. "
                    "–ß—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ —á–∞—Å—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
                )
                user_data["joined"] = now.isoformat()
                save_users(user_joined)
        await asyncio.sleep(10)

app = FastAPI()

@app.post("/yougile/webhook")
async def yougile_webhook(request: Request):
    data = await request.json()
    await bot.send_message(ADMIN_ID, f"–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ YouGile:\n{data}")
    return {"status": "ok"}

async def main():
    asyncio.create_task(reminder_loop())

    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)

    await asyncio.gather(
        dp.start_polling(bot),
        server.serve()
    )

if __name__ == "__main__":
    asyncio.run(main())
